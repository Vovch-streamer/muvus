# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Main build and deploy script

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    - run: npm ci
      working-directory: './frontend'
    - run: npm run build --if-present
      working-directory: './frontend'
    - run: npm test
      working-directory: './frontend'
    # - run: npm ci
    #   working-directory: './backend'

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/staging.key
        chmod 600 ~/.ssh/staging.key
        cat >>~/.ssh/config <<END
        Host staging
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/staging.key
          StrictHostKeyChecking no
        END
      env:
        SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}

    - name: Copy artifacts
      run: |
        ssh staging 'rm -rf /var/www/html'
        scp -r frontend/build staging:/var/www/html

        ssh staging 'rm -rf /var/www/backend'
        scp -r backend staging:/var/www/backend

    - name: Restart back-end
      run: ssh staging 'pm2 restart index'
